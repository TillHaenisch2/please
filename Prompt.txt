Please help me write an interactive command interpreter in ruby. It maintains a collection of todo lists. Every list has a name, a unique id and zero or more entries. Each list is a ruby object of class List with the attributes "name",id, "entries" which is a list starting empty. The lists are stored in a global dictionary with the name of the list as key. Every entry is a ruby object of class Entry having a unique id, a name, an associated date and a text as attributes. The main program has the name "please" in please.rb It accepts valid commands either as command line parameters or in interactive mode from the prompt "please> ". All commands can have mandatory and optional subcommands and parameters and can be abbreviated as much as being unique. For every command entered, the subcommands and parameters are parsed and stored in a dictionary. This dictionary is passed to a function with the name of the command appended to "do_". The valid commands are "me", "add", "delete", "wife", "show", "print", "move", "save", "quit", "exit", "wife", "drink", "show", "boards", "set". The commands are case insensitive and the names as well as the names of subcommands and parameters can be abbreviated in a unique way. With the given list of commands "d" would be a valid abbreviation for "delete" as would be "dele". Parameters have the form parameter=value. The command add has the parameter name which is the name associated with an entry. The command "add" has the subcommands "daily", "weeky", "monthly", "redo". The subcommand "redo" has the parameter "times". The "move" command has the unnamed parameter "id" which is accepted directly after the command and is an integer number. It has the named parameters "from" and "to". The function do_add creates an entry object with a unique id and the text given as parameter. It is stored in the list "default".
The "save" command saves the entire data in json format in a file called "please.json".
The "exit" command does "save" and terminates the program.
The "quit" command terminates the program.
The "wife" command puts the program in "wife-mode". In "wife-mode" the response to all inputs, valid commands or not,  is just displaying the text "yes" until the command "drink" is entered. Then the program is back in "normal-mode" where the appropriate commands are executed.
On program startup the program checks, if the file "please.json" exists. If yes, it is read and loaded in the global dictionary.
The "boards" command lists all defined todo lists with their name and id.
The "show" command lists all entries of the current list. This is the default list, if no other name is given as the parameter "board".
The set command sets different global variables according to the given parameter. The integer parameter "board" sets the default board id for operations. The string parameter "file" sets the name of the file to write or read from.
